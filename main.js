(()=>{"use strict";var e={d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{hi:()=>F,cM:()=>R,$f:()=>B});const t=document.querySelector(".cards__list"),r=document.querySelector("#card-modal"),s=r.querySelector(".modal__image"),n=r.querySelector(".modal__card-title"),i=document.querySelector(".profile__edit-button"),o=document.querySelector("#profile-modal"),a=document.querySelector(".profile__add-button"),l=document.querySelector("#cards-modal"),d=document.querySelector(".profile__title"),h=document.querySelector(".profile__subtitle"),c=o.querySelector(".form__input-name"),u=o.querySelector(".form__input-description"),_=(l.querySelector(".form__input-title"),l.querySelector(".form__input-link"),{inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"}),m=o.querySelector(".form"),p=l.querySelector("#cards-form"),f=document.querySelector("#propic-form"),E=document.querySelector("#delete-form"),b=document.querySelector("#propic-modal"),v=document.querySelector(".profile__image-ed"),L=document.querySelector(".profile__image"),S=document.querySelector("#delete-modal");class y{constructor(e,t,r,s){let{handleDelete:n,handleLike:i,handleUnlike:o}=s;this.name=e.name,this.link=e.link,this._cardSelector=t,this._handleImageClick=r,this.id=e._id,this.isLiked=e.isLiked,this._handleDelete=n,this._handleLike=i,this._handleUnlike=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._cardElement=this._getTemplate(),this._setEventListeners(),this._cardElement.querySelector(".card__image").src=this.link,this._cardElement.querySelector(".card__image").alt=`photo of ${this.name}`,this._cardElement.querySelector(".card__title").textContent=this.name,!0===this.isLiked&&this.buttonLike.classList.add("card__button-like_active"),this._cardElement}_setEventListeners(){this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick(this)})),this.buttonLike=this._cardElement.querySelector(".card__button-like"),this.buttonLike.addEventListener("click",(()=>{Array.from(this.buttonLike.classList).includes("card__button-like_active")?this._handleUnlike(this.id):this._handleLike(this.id)})),this.buttonTrash=this._cardElement.querySelector(".card__button-delete"),this.buttonTrash.addEventListener("click",(()=>{this._handleDelete(this._cardElement,this.id)}))}_handleLikeButton(){this.buttonLike.classList.toggle("card__button-like_active")}_handleTrashButton(){this._cardElement.remove()}}function k(e){const t=e.name,r=e.link;B.open({title:t,link:r})}function C(e){const t=new y(e,"#card-template",k,{handleDelete:(e,t)=>{R.open(),R.catchSelectedCard(e,t)},handleLike:e=>{F.addLike(e).then((e=>{t._handleLikeButton()}))},handleUnlike:e=>{F.deleteLike(e).then((e=>{t._handleLikeButton()}))}});return t.generateCard()}function g(e,t,r){t.querySelector(".form__button").textContent=e?"Saving...":r}class q{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._errorMessages=this._form.querySelectorAll(".form__input-error"),this._inputs=this._form.querySelectorAll(".form__input")}showInputError(e,t){e.classList.add(this._inputErrorClass);const r=this._form.querySelector(`.${e.id}-error`);r.textContent=t,r.classList.add(this._errorClass)}hideInputError(e){e.classList.remove(this._inputErrorClass),this._form.querySelector(`.${e.id}-error`).classList.remove(this._errorClass)}checkInputValidity(e){if(e.validity.valid)this.hideInputError(e);else{const t=e.validationMessage;this.showInputError(e,t)}}hasInvalidInput(){return this.inputList.some((e=>!e.validity.valid))}toggleButtonState(){this.hasInvalidInput()?(this.buttonElement.classList.add(this._inactiveButtonClass),this.buttonElement.setAttribute("disabled",!0)):(this.buttonElement.classList.remove(this._inactiveButtonClass),this.buttonElement.removeAttribute("disabled"))}setEventListeners(){this.inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this.buttonElement=this._form.querySelector(this._submitButtonSelector),this.toggleButtonState(),this.inputList.forEach((e=>{this.inputElement=e,this.inputElement.addEventListener("input",(()=>{this.checkInputValidity(e),this.hasInvalidInput(),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.toggleButtonState()})),this.setEventListeners()}clearError(){this._errorMessages.forEach((e=>{e.classList.remove("form__input-error_active")})),this._inputs.forEach((e=>{e.classList.remove("form__input_type_error")}))}}class I{constructor(e,t){let{data:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=t}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}class U{constructor(e){this.popup=e}open(){this.popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this.popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this.buttonClose=this.popup.querySelector(".modal__button-close"),this.buttonClose.addEventListener("click",(()=>{this.close()})),this.popup.addEventListener("mousedown",(e=>{e.target===e.currentTarget&&this.close()}))}}class w extends U{constructor(e,t){let{handleFormSubmit:r,handleClearError:s,renderLoading:n}=t;super(e),this.handleFormSubmit=r,this.form=this.popup.querySelector(".form"),this.handleClearError=s,this._renderLoading=n}close(){super.close(),this.form.reset(),this.handleClearError()}_getInputValues(){const e=this.form.querySelectorAll(".form__input"),t={};for(const r of e)t[r.name]=r.value;return t}setEventListeners(){super.setEventListeners(),this.form.addEventListener("submit",(e=>{this._renderLoading(),e.preventDefault(),this.handleFormSubmit(this._getInputValues())}))}}const B=new class extends U{constructor(e,t,r){super(e),this._modalImage=t,this._modalTitle=r}open(e){this._modalTitle.textContent=e.title,this._modalImage.src=e.link,this._modalImage.alt=`photo of ${e.title}`,super.open()}}(r,s,n);B.setEventListeners();const $=new class{constructor(e,t,r){this.name=e,this.job=t,this.avatar=r}getUserInfo(){return{name:this.name.textContent,about:this.job.textContent}}setUserInfo(e){let{name:t,about:r,avatar:s}=e;this.name.textContent=t,this.job.textContent=r,this.avatar.src=s}}(d,h,L),T=new q(_,m);T.enableValidation();const P=new q(_,p);P.enableValidation();const A=new q(_,f);A.enableValidation();const x=new w(o,{handleFormSubmit:e=>{F.editProfile(e).then((e=>{x.close(),$.setUserInfo(e)})).finally((()=>{g(!1,m,"Save")}))},handleClearError:()=>{T.clearError()},renderLoading:()=>{g(!0,m)}});x.setEventListeners(),i.addEventListener("click",(()=>{!function(e){let{name:t,about:r}=e;c.value=t,u.value=r}($.getUserInfo()),x.open()}));const F=new class{constructor(e,t){let{baseUrl:r,headers:s}=e;this._baseUrl=r,this._headers=s,this._checkResponse=t}loadUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}editProfile(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then(this._checkResponse)}addNewCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}deleteLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProPic(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}returnUserInfoAndCards(){const e=[this.loadUserInfo(),this.getInitialCards()];return Promise.all(e)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f01264e8-2101-4ab7-b120-b09b55e63681","Content-Type":"application/json"}},(function(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}));F.returnUserInfoAndCards().then((e=>{$.setUserInfo(e[0]),new I({data:e[1],renderer:e=>{const r=C(e);t.append(r)}},t).renderItems()})).catch((e=>console.error(e)));const D=new w(b,{handleFormSubmit:e=>{F.updateProPic(e.link).then((t=>{D.close(),L.src=e.link})).finally((()=>{g(!1,f,"Save")}))},handleClearError:()=>{A.clearError()},renderLoading:()=>{g(!0,f)}},A);D.setEventListeners(),v.addEventListener("click",(()=>{D.open()}));const R=new class extends U{constructor(e,t){let{handleFormSubmit:r,renderLoading:s}=t;super(e),this.handleFormSubmit=r,this.form=this.popup.querySelector(".form"),this._renderLoading=s}close(){super.close()}setEventListener(){super.setEventListeners(),this.form.addEventListener("submit",(e=>{e.preventDefault(),this._renderLoading(),this.handleFormSubmit(this.cardElement,this.id)}))}catchSelectedCard(e,t){this.cardElement=e,this.id=t}}(S,{handleFormSubmit:(e,t)=>{F.deleteCard(t).then((t=>{e.remove(),R.close()})).finally((()=>{g(!1,E,"Yes")}))},renderLoading:()=>{g(!0,E)}});R.setEventListener();const j=new w(l,{handleFormSubmit:e=>{F.addNewCard(e).then((e=>{j.close(),new I({data:[e],renderer:e=>{const r=C(e);t.prepend(r)}},t).renderItems()})).finally((()=>{g(!1,p,"Create")}))},handleClearError:()=>{P.clearError()},renderLoading:()=>{g(!0,p)}},P);j.setEventListeners(),a.addEventListener("click",(()=>{j.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,